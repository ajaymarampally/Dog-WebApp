{"version":3,"sources":["components/header/Header.js","containers/Main.js","containers/loading/Loading.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Header","top","duration","distance","className","href","src","type","id","htmlFor","Main","Component","defaultOptions","loop","autoplay","animationData","legoData","rendererSettings","preserveAspectRatio","Loading","props","state","done","undefined","setTimeout","setState","this","class","options","height","width","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"4WAoCiBA,MA/BjB,WACI,OACE,kBAAC,OAAD,CAAMC,KAAG,EAACC,SAAU,IAAMC,SAAS,QACnC,6BACE,4BAAQC,UAAU,UAChB,uBAAGC,KAAK,8CAA8CD,UAAU,QAC5D,yBAAKA,UAAU,aAAaE,IAAI,2DAEpC,2BAAOF,UAAU,WAAWG,KAAK,WAAWC,GAAG,aAC/C,2BAAOJ,UAAU,YAAYK,QAAQ,YACnC,0BAAML,UAAU,aAElB,wBAAIA,UAAU,QACZ,4BACE,uBAAGC,KAAK,aAAR,gBAEF,4BACE,uBAAGA,KAAK,cAAR,cAEF,4BACE,uBAAGA,KAAK,UAAR,UAEF,4BACE,uBAAGA,KAAK,sBAAR,2BCxBOK,E,uKAEb,OACI,6BACI,kBAAC,EAAD,W,GAJkBC,aCM5BC,EAAiB,CAACC,MAAM,EAAKC,UAAU,EAAKC,cAAeC,EAAiBC,iBAAkB,CAACC,oBAAqB,mBAErGC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAMC,GAHS,E,gEAOE,IAAD,OAClBC,YAAW,WACT,EAAKC,SAAS,CAAEH,MAAM,MACrB,O,+BAIH,OACE,yBAAKlB,UAAU,eACXsB,KAAKL,MAAMC,KAQX,kBAAC,EAAD,MAPA,kBAAC,IAAD,KACA,yBAAKK,MAAM,YACT,wBAAIvB,UAAU,UAAd,oBACA,kBAAC,IAAD,CAAQA,UAAU,SAASwB,QAAShB,EAAgBiB,OAAQ,IAAKC,MAAO,a,GArBjDC,IAAMpB,WCC5BqB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,+mnDEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.6e5939fe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\nimport {Fade} from \"react-reveal\"\r\nimport Button from \"../button/Button\"\r\n\r\nfunction Header() {\r\n    return (\r\n      <Fade top duration={1000} distance=\"20px\">\r\n      <div>\r\n        <header className=\"header\">\r\n          <a href=\"https://ajaymarampally.github.io/Dog-WebApp\" className=\"logo\">\r\n              <img className=\"icon-image\" src=\"https://image.flaticon.com/icons/svg/2829/2829818.svg\" />             \r\n          </a>\r\n          <input className=\"menu-btn\" type=\"checkbox\" id=\"menu-btn\" />\r\n          <label className=\"menu-icon\" htmlFor=\"menu-btn\">\r\n            <span className=\"navicon\"></span>\r\n          </label>\r\n          <ul className=\"menu\">\r\n            <li>\r\n              <a href=\"#Services\">SUPERPOWERS</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#SideKicks\">SIDEKICKS</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#Blogs\">BLOGS</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#Service Providers\">SERVICE PROVIDERS</a>\r\n            </li>\r\n          </ul>\r\n        </header>\r\n      </div>\r\n      </Fade>\r\n    );\r\n  }\r\n  export default Header;\r\n  ","\r\nimport React,{Component} from \"react\";\r\nimport Header from \"../components/header/Header\"\r\n\r\nexport default class Main extends Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Header />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport './Loading.css'\r\nimport FadeIn from \"react-fade-in\";\r\nimport Lottie from \"react-lottie\";\r\nimport ReactLoading from \"react-loading\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport * as legoData from \"../../assets/json/19669-coffee-meditation.json\"\r\nimport Main from \"../Main\"\r\nimport '../loading/Loading.css'\r\n\r\nconst defaultOptions = {loop: true,autoplay: true,animationData: legoData.default,rendererSettings: {preserveAspectRatio: \"xMidYMid slice\"}}\r\n\r\nexport default class Loading extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        done: undefined\r\n      };\r\n    }\r\n  \r\n    componentDidMount() {\r\n      setTimeout(() => {\r\n        this.setState({ done: true });\r\n      }, 3000);\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"Loading-App\">\r\n          {!this.state.done ? (\r\n            <FadeIn>\r\n            <div class=\"L-header\">\r\n              <h1 className=\"L-data\">Fetching Data!!!</h1>\r\n              <Lottie className=\"L-logo\" options={defaultOptions} height={300} width={300} />                      \r\n            </div>\r\n          </FadeIn>           \r\n          ) : (\r\n            <Main />         \r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Loading from \"./containers/loading/Loading\"\n\nfunction App() {\n  return (\n    <div>\n      <Loading />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/font-awesome/css/all.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}